#User Guide for Indus Integration Framework
=User Guide for Indus Integration Framework=
===IOWA STATE UNIVERSITY===
=INDUS INTEGRATION FRAMEWORK=
=USER'S GUIDE=


==About INDUS==

==What is INDUS?==

INDUS is a [http://www.cild.iastate.edu/~honavar/nsfitr02.html research project] under the direction of [http://www.cs.iastate.edu/~honavar/homepage.html Dr. Vasant Honavar],a professor in the [http://www.cs.iastate.edu/ Computer Science Department Computer Science Department] at [http://www.iastate.edu/ Iowa State University]. INDUS stands for Intelligent Data Understanding System.  It allows users to virtually combine data that is physically spread across many data sources and run queries on that data as though it existed in a single database.  The individual data sources can be Ontology Extended Data Sources and  the system is able to understand  queries using ontological  constructs such as superclass and subclass respectively. The user poses the queries in SQL like syntax (INDUS SQL)  which overloads the left and right angle brackets brackets (“<”  and “>”) to imply subclass and superclass respectively.


==Where can I download/get INDUS?==

INDUS is an open source code and is available as [http://code.google.com/p/indusintegrationframework/ here]. The source is provided as is without any warranty.

==How do/can I contribute?==

You certainly may.  Contact [http://www.cs.iastate.edu/~neeraj/ Neeraj Koul] at neeraj@cs.iastate.edu for further direction.


==Using INDUS==

===Environment Setup===

INDUS requires a database to store temporary results (the results from queries to real data sources).  The information (name, location, and type of database) must be stated in the indus.conf file (described below).  The temporary results are deleted when they are no longer needed.

===INDUS Configuration File===

This is the main configuration file  that sets up the  INDUS framework.  This file has to be named *indus.conf*.  The   possible key/value pairs that can exist in this file are


||*Key*||*Value*||*Comments*||

||driver_<rdbms>||<driver_class>||Examples of <rdbms>:mysql, postgress, oracle Examples of <driver_class>:com.mysql.jdbc.Driver,org.postgresql. Driver The current version has been tested with mysql||

||dbname_indus||<DB_name>||Name of the database in which INDUS will store temporary results||
||hostname_indus||<URL_to_DB>||Location of a database in which INDUS will store temporary results||
||dbtype_indus||<DB_type>||Type of the database in which INDUS will store temporary results.  It must match <rdbms> for one of the driver keys provided above.||
||<DB_name>||<username>;<password>||A user name (with read access) and password must be provided for every database||
||<view_filename>||<view.txt>||Path to the file  containing configuration files for view.|| 
||<class_name_key>||<class_name>||Only applicable for developers who want to add custom implementations of  certain components (in lieu of defaults) .These entries are used by the Solution Creator.  It allows for the dynamic loading of classes other than the defaults.
The possible strings for <class_name_key> can be found in:
org.iastate.ailab.qengine.core.factories.solution.SolutionCreator
The value of <class_name> should be the fully qualified class name of a class that implements the same interface as <class_name_key>.||
||world_semantics||<open_or_closed>||Future use. Currently Ignored.||





The following are the major classes in the learning framework.
 * *Classifier:* Interface which every new classifier must implement. Current implementation includes Naïve Bayes and Decision Trees.  

 * *LDInstances:*   A large data set instance which may possibly exceed the size that can be stored in memory. It consists of data descriptor (Desc(D))  and a handle to the  datsource  that answers sufficient statistics.

 * *SSDataSource:*  Interface that every  datasource that  answers sufficient statistics queries will implement.  Current implementation has RelationalDataSource.  Future one will have IndusDataSource.

 * *ReplaceMissingValue:*  An unsupervised filter that replaces missing values by assigning the counts proportionally. Classifiers can call the function in this filter to get modified counts.

 * *Evaluation:*  Evaluates the given classifier on train and test data to return a Confusion matrix. Any implemented Classifier will automatically have access to this.

The Class diagram is shown below

  http://induslearningframework.googlecode.com/files/Classifier_seeded2.jpg

===Execution Flow Overview===
The implementing Classifier Class (say NaiveBayes/ID3) constructs the queries (including path clause )   that  are required for this particular type of  classifier. Any Optimizations (which may depend on passed options) are also performed here.   The constructed  queries  are posed to the  SSDataSource. The Classifier does not need to know how the queries are actually answered as they are abstracted out by SSDataSource Interface ( As an illustration the IndusDataSource will be a virtual data source). The classifier if   required can call the ReplaceMissingValues filter to get the modified counts.

 